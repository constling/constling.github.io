---
layout: post
title:  "简历"
date:   2019-08-17 22:00:00
categories: 面试
---

## 准备内容

* Java基础准备。
* Spring知识准备充分。
* 梳理简历的框架。
* 中间件分析。
    * 消息队列。
    * 负载均衡。
    * 数据搜。
    * DB。
* 基础服务
    * 通用存储。
    * 计算。
* RPC框架。
* ORM框架。
* Redis。
* 重点问题分析。
* 高可用系统。

## 中间件服务

**消息队列**

[学习链接](https://www.cnblogs.com/wuzm/p/11105176.html)

核心场景：

* 解耦
* 异步
* 削峰

缺点：

* 系统可用性降低，需要保证消息队列的可用性。
* 负载度提高。你怎么[保证消息没有重复消费]？怎么[处理消息丢失的情况]？怎么保证消息传递的顺序性？
* 一致性问题。人都以为你这个请求就成功了；但是问题是，要是 BCD 三个系统那里，BD 两个系统写库成功了，结果 C 系统写库失败了，咋整？你这数据就不一致了。
所以消息队列实际是一种非常复杂的架构，你引入它有很多好处，但是也得针对它带来的坏处做各种额外的技术方案和架构来规避掉，做好之后，你会发现，妈呀，系统复杂度提升了一个数量级，也许是复杂了 10 倍。但是关键时刻，用，还是得用的。

**负载均衡**

[学习链接](https://www.jianshu.com/p/c91fe3f94e5c)

原理：

用户访问的请求，根据负载均衡算法，分发到集群中的一台处理服务器。（一种把网络请求分散到一个服务器集群中的可用服务器上去的设备

作用

* 解决并发压力。提高应用处理能力。
* 提供故障转移，实现高可用。
* 通过添加或减少服务器数量，提供网站伸缩性。
* 安全防护。（负载均衡设备上做一些过滤，黑白名单等处理）

分类

DNS负载均衡，HTTP负载均衡，IP负载均衡，反向代理负载均衡、链路层负载均衡等

算法

轮询、 随机、最少链接、Hash（源地址散列）、加权

正向代理与反向代理

[学习链接](https://www.cnblogs.com/xudong-bupt/p/8661523.html)

## 重点问题

## 高可用系统
## 双11准备
