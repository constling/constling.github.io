---
layout: post
title:  "Spring框架学习"
date:   2019-05-26 22:05:00
categories: 其它
---

## Spring架构
**概念**
1. 依赖倒置：
上层模块不应该依赖于下层模块，它们共同依赖于一个抽象。抽象不能依赖于具象，具象依赖于抽象。

2. 控制反转
模块与模块之间通过抽象来建立连接。具体使用的模块，交由配置文件来控制，实现控制转移。
控制反转IoC，是说对象的控制权进行转移，转移到第三方。比如转移交给了IoC容器，它就是一个创建工厂，你要什么对象，它就给你什么对象，有了IoC容器，依赖关系就变了，原先的依赖关系就没了，它们都依赖IoC容器了，通过IoC容器来建立它们之间的关系。
[链接](https://www.cnblogs.com/Mr-Rocker/p/7721824.html)

3. 面向切面aop
[链接](https://www.cnblogs.com/Wolfmanlq/p/6036019.html)


### Spring
Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。

**Spring是什么**
Spring是一个库，它的功能是提供了一个软件框架，这个框架目的是使软件之间的逻辑更加清晰，配置更灵活，实现这个目的的手段使用AOP和IoC。

**Spring的优势**
* Spring轻量，大约2mb。
* 提供IOC的控制反转，解少模块间的依赖。
* 提供AOP面向切面的框架，将应用业务与系统业务分开。
* 提供容器，实现对象的生命周期管理。
* MVC框架：Spring的WEB框架是个精心设计的框架，是Web框架的一个很好的替代品。
* 事务管理：Spring 提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务（JTA）。
* 异常处理：Spring 提供方便的API把具体技术相关的异常（比如由JDBC，Hibernate or JDO抛出的）转化为一致的unchecked 异常。

**spring教程**
[链接](https://www.yiibai.com/spring/spring-tutorial-for-beginners.html)

**特点**
1. 轻量
2. 控制反转
3. 面向切面

**context对于bean的好处**
* bean关注的是一个对象的抽象化。比如使用数据库的属性、名称等。
* context将无关的内容配置化，编程只用关注接口内容。比如：数据库访问，不用关心数据库的名称、方式。只用使用数据库的读写、存储等。


**Spring for Jdbc的意义**
* 统一管理连接。
* 节省Jdbc操作重复代码封装与编写。

**JdbcTemplate的优点**
* 配置基于模板设置
* 完成了资源的创建和释放的工作
* 完成了对JDBC的核心流程的工作，包括SQL语句的创建和执行，简化了对JDBC的操作
* 仅需要传递DataSource就可以把它实例化
* JdbcTemplate只需要创建一次，减少了代码复用的烦恼
* JdbcTemplate是线程安全类

**Java持久化**
[待学习链接](https://blog.csdn.net/qq_39470733/article/details/80166949)

**相关学习**
* [Maven链接](https://www.yiibai.com/maven/)
* [Spring](https://www.w3cschool.cn/wkspring/pesy1icl.html)

## ORM架构

**myBatis与Hibernate相比主要优势**
**Redis持久化有哪些方式**
**Nignx与Apache的原理及不同**

**面向切面的实现原理**
通过代理对象实现。

**定义自己的原则**
[待学习]


##数据持久化存储
### redis
学习网址：
https://www.cnblogs.com/jasontec/p/9699242.html

1. redis有哪些架构

**主从复制**
特点：
* 具有master/slave角色。
* master/slave数据相同。
* 降低master读压力在从库。

问题：
* 无法保证高可用。
* 没有解决master写的压力。

**哨兵**
主从模式下面增加‘哨兵’监控机制，保证高可用。

**集群**
redis cluster，主要是针对海量数据+高并发+高可用的场景，海量数据，如果你的数据量很大，那么建议就用redis cluster

* 将数据进行分片，每个master上放一部分数据。
* 提供高可用支持，部分master不可用时，可以继续工作。

* 支撑N个redis master node，每个master node都可以挂载多个slave node
高可用，因为每个master都有salve节点，那么如果mater挂掉，redis cluster这套机制，就会自动将某个slave切换成master。

**集群代理型**

**集群直连型**

**数据分布算法**
1. 顺序分布
* 数据分散易倾斜
* 键值业务相关
* 可顺序访问
* 支持批量操作

2. 哈希分布
* 数据分散度高
* 键值分布业务无关
* 无法顺序访问
* 支持批量操作

哈希分布分为：节点取余区、一致性哈希分区、虚拟cao分区。
https://blog.csdn.net/qq_27862335/article/details/81771812

一致性哈希：
https://www.cnblogs.com/lpfuture/p/5796398.html

### 一致性Hash性质
考虑到分布式系统每个节点都有可能失效，并且新的节点很可能动态的增加进来，如何保证当系统的节点数目发生变化时仍然能够对外提供良好的服务，这是值得考虑的，尤其实在设计分布式缓存系统时，如果某台服务器失效，对于整个系统来说如果不采用合适的算法来保证一致性，那么缓存于系统中的所有数据都可能会失效（即由于系统节点数目变少，客户端在请求某一对象时需要重新计算其hash值（通常与系统中的节点数目有关），由于hash值已经改变，所以很可能找不到保存该对象的服务器节点），因此一致性hash就显得至关重要，良好的分布式cahce系统中的一致性hash算法应该满足以下几个方面：
* 平衡性(Balance)
* 单调性
* 分散性
* 负载
* 平滑性

**Redis实现分布式锁一**
https://baijiahao.baidu.com/s?id=1623086259657780069&wfr=spider&for=pc


## 服务端设计理念
1. 高可用。
2. 可靠。


## 面试
1. 定义清楚问题
2. 思考、分析问题
3. 解决问题步骤
4. 更进一步思考


## memcache
memcache是一套分布式的高速缓存系统，由LiveJournal的Brad Fitzpatrick开发，但目前被许多网站使用以提升网站的访问速度，尤其对于一些大型的、需要频繁访问数据库的网站访问速度提升效果十分显著。