---
layout: post
title:  "最新学习"
date:   2019-07-22 22:00:00
categories: 面试
---

## 链接

[http版本更新](https://www.sohu.com/a/152686075_268033)

[grpc线程模型](http://www.uml.org.cn/zjjs/201711241.asp)

[brpc](https://github.com/apache/incubator-brpc/blob/master/README_cn.md)

[http2.0学习](https://www.jianshu.com/p/67c541a421f9)

[学习汇总](https://github.com/xingshaocheng/architect-awesome)

[java api online](https://docs.oracle.com/javase/8/docs/api/)

## 相关知识

**长轮循**

原理：客户端发起一个拉请求，如果没有数据则服务端hold请求，等待有数据或者一定时间返回。客户端收到数据返回后，再次请求。

**websocket**

原理：使用http建立通道。通过心跳包维护长连接。

**tcp三次握手**

* 客户端发送握手包syn，等待服务端确认。
* 服务器收到包，确认客户的包。同时发送自己的syn+ack包。
* 客户端收到syn+ack包，向服务端发送ack包。连接建立完毕。

**http/2**

HTTP/2 通过 stream 支持了连接的多路复用，提高了连接的利用率。Stream 有很多重要特性：

* 一条连接可以包含多个 streams，多个 streams 发送的数据互相不影响。
* Stream 可以被 client 和 server 单方面或者共享使用。
* Stream 可以被任意一段关闭。
* Stream 会确定好发送 frame 的顺序，另一端会按照接受到的顺序来处理。
* Stream 用一个唯一 ID 来标识。

**cap理论**

* 问题解决：可以保证高可用，然后通过通知的方式，触发改变通知。

**解决cap设计的系统如下**

* 程序如果能够读取数据库的话读取数据库，如果不能的话可以使用缓存代替。
* 所有的读取操作使用版本号或者其他可以使用乐观锁的机制。
* 客户端的所有更新操作全部放在队列中顺序处理。更新操作中要包括该更新的读取操作时的版本信息。
* 当分区数量足够少的时候，可以处理队列中的更新操作。比较简单的方式是建立一个跨越所有分布式副本的事务，对每个副本进行更新操作（其他方式比如quorum等等也可以）。如果该更新的读取操作时的版本信息不是当前数据库中数据的版本信息，则将失败返回给客户端，否则返回成功。
* 数据库操作结果（确认或者取消）通过异步的方式发送到客户端，可以通过邮件，消息队列或者其他异步方式。

该系统符合CAP如下：

* 符合C（高一致性）：读取的数据都是基于快照的，而且错误的更新操作不会执行。
* 符合A（高可用性）：读取和更新都会返回数据。
* 符合P（高分区容错性）：允许网络或者节点出错。




