---
layout: post
title:  "Java面试"
date:   2019-05-26 22:05:00
categories: 其它
---

## 待学习列表
* 大数据分析
* spring
* 缓存中间件
* rpc中间件
* 消息
* 存储
* 数据库
* 多线程。

## jAVA基础

**后端技术**
[学习链接](https://github.com/xingshaocheng/architect-awesome)

**ACID**

* 原子性（Atomicity）: 事务的操作一起完成、一起失败。
* 一致性（Consistency）：事务必须始终保持系统处于一致的状态，不管在任何给定的时间并发事务有多少。
* 隔离性（Isolation）：如果有两个事务，运行在相同的时间内，执行相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。
* 持久性（Durability）：在事务完成以后，该事务对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。

**BS&CS的联系和区别**
* 模式不同
BS:指浏览器、服务端模式。
CS:指客户端、服务端模式。
* 安全级别的高、低不同。
* 程序架构不同
CS注重流程、权限校验。
BS注重访问速度。
* 软件重用不同
* 系统维护不同
CS系统升级难。BS由构件组成，升级容易。

**cookie和session的区别**
* cookie
    * cookie以文本格式存储在浏览器上，存储量有限。
    * 方便与javascript交换数据、方便获取用户信息。
    * 浏览器可能会禁用cookie。
    * 替代方案，url参数。
* session
    * 会话存储在服务端，可以无限量存储多个变量并且比cookie更安全。
    * 用条端会为每一个用户用一个id来标识。
 
**GET&POST的区别**
* GET
    * 参数包含在URL中。
* POST
    * 参数放在body中。
* GET在浏览器回退时是无害的，而POST会再次提交请求。
* GET产生的URL地址可以被Bookmark，而POST不可以。
* GET请求会被浏览器主动cache，而POST不会，除非手动设置。
* GET请求只能进行url编码，而POST支持多种编码方式。
* GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。
* GET请求在URL中传送的参数是有长度限制的，而POST没有。
* 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。
* GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。
* GET参数通过URL传递，POST放在Request body中。

**常见的http方法有哪些**
* GET： 用于请求访问已经被URI（统一资源标识符）识别的资源，可以通过URL传参给服务器
* POST：用于传输信息给服务器，主要功能与GET方法类似，但一般推荐使用POST方式。
* PUT： 传输文件，报文主体中包含文件内容，保存到对应URI位置。
* HEAD： 获得报文首部，与GET方法类似，只是不返回报文主体，一般用于验证URI是否有效。
* DELETE：删除文件，与PUT方法相反，删除对应URI位置的文件。
* OPTIONS：查询相应URI支持的HTTP方法。

**https工作原理**
[链接](https://blog.csdn.net/sean_cd/article/details/6966130)

**IOC**
控制反转（Inversion of Control，缩写为IoC）,包含依赖注入和依赖查找。
* 依赖查找：容器提供回调接口和上下文条件给组件。组件就必须使用容器提供的API来查找资源和协作对象，仅有的控制反转只体现在那些回调方法上（也就是上面所说的 类型1）：容器将调用这些回调方法，从而让应用代码获得相关资源。
* 依赖注入：组件不做定位查询，只提供普通的Java方法让容器去决定依赖关系。容器全权负责的组件的装配，它会把符合依赖关系的对象通过JavaBean属性或者构造函数传递给需要的对象。通过JavaBean属性注射依赖关系的做法称为设值方法注入(Setter Injection)；将依赖关系作为构造函数参数传入的做法称为构造器注入（Constructor Injection）

**WEB容器**
提供服务的web程序。常见web容器：webSphere、tomcat、weblogic。

**tomcat**
待学习

**类加载器**
一个应用程序总是由n多个类组成，Java程序启动时，并不是一次把所有的类全部加载后再运行，它总是先把保证程序运行的基础类一次性加载到jvm中，其它类等到jvm用到的时候再加载。这样的好处是节省了内存的开销，因为java最早就是为嵌入式系统而设计的，内存宝贵，这是一种可以理解的机制，而用到时再加载这也是java动态性的一种体现。

**AOP**
面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。
个人理解就是提供了一些扩展点，以某种机制注入进去使用。
[aop的实现方式](https://www.cnblogs.com/xiaoxi/p/5981514.html)

**Servlet**
Servlet是指在服务端运行的小程序。
待学习：
[链接](https://www.runoob.com/servlet/servlet-tutorial.html)

**ajax**
待学习

**CORBA**
待学习

**finalize**
finalize用于在GC发生前事先调用去回收JNI调用中申请的特殊内存，下次GC发生时候保证GC后所有该对象的内存都释放了。

* [链接](https://blog.csdn.net/Justin_zhao/article/details/74358828)

**JNI**
Java Natibe Inetrface：Java 是跨平台的语言，但是在有些时候仍然是有需要调用本地代码。

**volatile**
多线程并发访问对象的变量时。对象的变量被拷贝到线程的内存区域。多线程并发访问不正确。

**符号==**
==就是用来比较值是否相等。

**其它**
* a = a + b，当类型不匹配时会报错。a += b，则会自动转换。


**GC策略**
1. 标记-清除算法
2. 复制算法
3. 标记-整理算法

**数据区**
java运行数据区：[链接](https://www.cnblogs.com/dolphin0520/p/3613043.html)
* 程序计数器
* Java栈
* 本地方法栈
* 方法区
* 堆

**StringBuffer & StringBuilder**
* StringBuffer 与 StringBuilder 中的方法和功能完全是等价的，
* 只是StringBuffer 中的方法大都采用了 synchronized 关键字进行修饰，因此是线程安全的，
而 StringBuilder 没有这个修饰，可以被认为是线程不安全的。 
* 在单线程程序下，StringBuilder效率更快，因为它不需要加锁，不具备多线程安全而StringBuffer则每次都需要判断锁，效率相对更低。

**HashMap & ConcurrentHashMap**
**显示锁&内置锁的区别**
**AQS**
AQS定义了一套多线程访问共享资源的同步器框架。

## RPC中间件

* 基于远程过程调用的中间件，允许一个应用程序中的过程调用远程应用程序中的过程，就好像它们是本地调用一样。该中间件实现一个查找远程过程的链接机制并使调用方能够以透明方式使用这些过程。以前，这种类型的中间件处理基于过程的程序；现在，它还包括基于对象的组件。
* 基于对象请求代理 (Object Request Broker, ORB) 的中间件，使应用程序的对象能够在异类网络之间分布和共享。
* 面向消息的中间件或基于 MOM 的中间件，使分布式应用程序可以通过发送和接收消息来进行通信和交换数据。

## java三个版本的理解
Java分三个版本: JavaSE(标准版)、JavaEE(企业版)、JavaME(微型版) ，其中JavaSE 是Java编程语言的基础, JavaEE是用于公司的PC端开发的，而JavaME是用于移动端开发的。

1. Java SE ( Java Platform , Standard Edition )。
Java SE以前称为J2SE。它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的Java 应用程序。
Java SE包含了支持Java Web服务开发的类,为Java Platform ，Enterprise Edition ( JavaEE )提供基础。

2. Java EE( Java Platform , Enterprise Edition )。 
这个版本以前称为J2EE。企业版本帮助开发和部署可移植、健壮、可伸缩且安全的服务器端Java 应用程序。
JavaEE是在JavaSE的基础上构建的,它提供Web服务、组件模型、管理和通信API ,可以用来实现企业级的面向服务体系结构( service-orientedarchitecture , SOA )和Web 2.0应用程序。

3. Java ME ( Java Platform , Micro Edition )。

这个版本以前称为J2ME。Java ME为在移动设备和嵌入式设备(比如手机、PDA、电视机顶盒和打印机)上运行的应用程序提供一 个健壮且灵活的环境。
Java ME包括灵活的用户界面、健壮的安全模型、许多内置的网络协议以及对可以动态下载的连网和离线应用程序的丰富支持。

## java ee
* [学习链接](https://blog.csdn.net/master_yao/article/details/61672910)

## java bean?

## https如何防止劫持
* https的安全基础是SSL。http+ssl=https。
* SSL提供加解密服务。

## 待学习
* mybatis的实现原理及源码。


## 开放问题
**如何设计电商秒杀系统**
**如何进web优化**


* 回答问题从背景开始说起。描述各个环节。如何优化。