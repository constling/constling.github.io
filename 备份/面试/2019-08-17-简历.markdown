---
layout: post
title:  "简历"
date:   2019-08-17 22:00:00
categories: 面试
---

## 准备内容

* Java基础准备。
* Spring知识准备充分。
* 梳理简历的框架。
* 中间件分析。
    * 消息队列。
    * 负载均衡。
    * 数据搜索。
    * DB。
    * 缓存。
    * 大数据。
* 基础服务
    * 通用存储。
    * 计算。
* RPC框架。
* ORM框架。
* 重点问题分析。
* 高可用系统。

## 中间件服务

**消息队列**

[学习链接](https://www.cnblogs.com/wuzm/p/11105176.html)

核心场景：

* 解耦
* 异步
* 削峰

缺点：

* 系统可用性降低，需要保证消息队列的可用性。
* 负载度提高。你怎么[保证消息没有重复消费]？怎么[处理消息丢失的情况]？怎么保证消息传递的顺序性？
* 一致性问题。人都以为你这个请求就成功了；但是问题是，要是 BCD 三个系统那里，BD 两个系统写库成功了，结果 C 系统写库失败了，咋整？你这数据就不一致了。
所以消息队列实际是一种非常复杂的架构，你引入它有很多好处，但是也得针对它带来的坏处做各种额外的技术方案和架构来规避掉，做好之后，你会发现，妈呀，系统复杂度提升了一个数量级，也许是复杂了 10 倍。但是关键时刻，用，还是得用的。

**负载均衡**

[学习链接](https://www.jianshu.com/p/c91fe3f94e5c)

原理：

用户访问的请求，根据负载均衡算法，分发到集群中的一台处理服务器。（一种把网络请求分散到一个服务器集群中的可用服务器上去的设备

作用

* 解决并发压力。提高应用处理能力。
* 提供故障转移，实现高可用。
* 通过添加或减少服务器数量，提供网站伸缩性。
* 安全防护。（负载均衡设备上做一些过滤，黑白名单等处理）

分类

DNS负载均衡，HTTP负载均衡，IP负载均衡，反向代理负载均衡、链路层负载均衡等

算法

轮询、随机、最少链接、Hash（源地址散列）、加权

正向代理与反向代理

[学习链接](https://www.cnblogs.com/xudong-bupt/p/8661523.html)

## 重点问题

**事务**

**锁**

[学习链接](https://www.jianshu.com/p/59469da035e7)

* 乐观锁&悲观锁
* 可重入锁
* 公平锁
* 独占锁与共享锁

**幂等**

**雪崩**

[学习链接] (https://www.zybuluo.com/1234567890/note/742259)

* 是什么
* 原因
* 应对策略


**mvvc**

原理

基于版本号的乐观锁，解决数据在不同事务下的竞争。

实现机制

在每开启一个事务时，会生成一个事务的版本号，被操作的数据会生成一条新的数据行（临时），但是在提交前对其他事务是不可见的，对于数据的更新（包括增删改）操作成功，会将这个版本号更新到数据的行中，事务提交成功，将新的版本号更新到此数据行中，这样保证了每个事务操作的数据，都是互不影响的，也不存在锁的问题。

**ABA问题**

* 原理
* 解决方法

**长轮询**

**AQS实现原理**

[学习链接](https://www.cnblogs.com/iou123lg/p/9464385.html)

**缓存击穿**

[学习链接](https://baijiahao.baidu.com/s?id=1619572269435584821&wfr=spider&for=pc)

**一致性hash**

* 性质
* 实现

**RingBuffer**

[实现原理](https://blog.csdn.net/jkqwd1222/article/details/82194305)

**动态限流**

[学习链接](https://mp.weixin.qq.com/s?__biz=MzA3NDcyMTQyNQ==&mid=2649259178&idx=1&sn=59a969cc39699aa02ec6c49d9255835d&chksm=8767ad54b01024426dc6bb257992c1dfc08b9a8c4126d2422396402a2dd59c034eee8cc305e3&mpshare=1&scene=1&srcid=0104zNPpaQ84ZHumaMcHa8at#rd)

**分布是一致性问题(cap)**

[学习链接](https://www.cnblogs.com/kerwing/p/9098893.html)

**并发控制问题**

[学习链接](https://blog.csdn.net/qq_28328381/article/details/82787709)
[学习链接2](https://www.cnblogs.com/paul8339/p/7737012.html)

## ORM

对象-关系映射(ORM)系统一般以中间件的形式存在，主要实现程序对象到关系数据库数据的映射。

典型：Hibernate。

## 高可用系统

* 扩展性好：垂直扩展、水平扩展。
* 监控告警。
* 无状态。
* 故障恢复。
* 限流、熔断、降级。
* 响应。
* 数据一致性。

[学习链接1](https://blog.csdn.net/hustspy1990/article/details/78008324)

* 是什么。

* [设计建议](https://www.cnblogs.com/rwxwsblog/p/6652872.html)

## 双11准备

* 代码review、压测。
* 流量评估。
* 降级策略。
* 扩容。
* 数据监控报警。
* 流量控制。
* 热点缓存。